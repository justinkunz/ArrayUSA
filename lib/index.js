const methods = require('./methods');
class ArrayUSA extends Array {}

ArrayFriend.prototype.ascending = methods.ascending;
ArrayFriend.prototype.assert = methods.assert;
ArrayFriend.prototype.batch = methods.batch;
ArrayFriend.prototype.copy = methods.copy;
ArrayFriend.prototype.countIf = methods.countIf;
ArrayFriend.prototype.countOf = methods.countOf;
ArrayFriend.prototype.deepCopy = methods.deepCopy;
ArrayFriend.prototype.descending = methods.descending;
ArrayFriend.prototype.difference = methods.difference;
ArrayFriend.prototype.evenIndexes = methods.evenIndexes;
ArrayFriend.prototype.filterType = methods.filterType;
ArrayFriend.prototype.isEmpty = methods.isEmpty;
ArrayFriend.prototype.last = methods.last;
ArrayFriend.prototype.mean = methods.mean;
ArrayFriend.prototype.median = methods.median;
ArrayFriend.prototype.mode = methods.mode;
ArrayFriend.prototype.oddIndexes = methods.oddIndexes;
ArrayFriend.prototype.onlyDuplicates = methods.onlyDuplicates;
ArrayFriend.prototype.partialMatch = methods.partialMatch;
ArrayFriend.prototype.partialMatchIndex = methods.partialMatchIndex;
ArrayFriend.prototype.product = methods.product;
ArrayFriend.prototype.quotient = methods.quotient;
ArrayFriend.prototype.random = methods.random;
ArrayFriend.prototype.randomIndex = methods.randomIndex;
ArrayFriend.prototype.replace = methods.replace;
ArrayFriend.prototype.shuffle = methods.shuffle;
ArrayFriend.prototype.sum = methods.sum;
ArrayFriend.prototype.toArray = methods.toArray;
ArrayFriend.prototype.toNum = methods.toNum;
ArrayFriend.prototype.toObject = methods.toObject;
ArrayFriend.prototype.toStr = methods.toStr;
ArrayFriend.prototype.types = methods.types;
ArrayFriend.prototype.withoutDuplicates = methods.withoutDuplicates;
ArrayFriend.prototype.withoutFalsyValues = methods.withoutFalsyValues;
ArrayFriend.prototype.withoutNullValues = methods.withoutNullValues;

const arrayUSA = (arr) => new ArrayUSA(...arr);

arrayUSA.protos = () => {
  Array.prototype.ascending = methods.ascending;
Array.prototype.assert = methods.assert;
Array.prototype.batch = methods.batch;
Array.prototype.copy = methods.copy;
Array.prototype.countIf = methods.countIf;
Array.prototype.countOf = methods.countOf;
Array.prototype.deepCopy = methods.deepCopy;
Array.prototype.descending = methods.descending;
Array.prototype.difference = methods.difference;
Array.prototype.evenIndexes = methods.evenIndexes;
Array.prototype.filterType = methods.filterType;
Array.prototype.isEmpty = methods.isEmpty;
Array.prototype.last = methods.last;
Array.prototype.mean = methods.mean;
Array.prototype.median = methods.median;
Array.prototype.mode = methods.mode;
Array.prototype.oddIndexes = methods.oddIndexes;
Array.prototype.onlyDuplicates = methods.onlyDuplicates;
Array.prototype.partialMatch = methods.partialMatch;
Array.prototype.partialMatchIndex = methods.partialMatchIndex;
Array.prototype.product = methods.product;
Array.prototype.quotient = methods.quotient;
Array.prototype.random = methods.random;
Array.prototype.randomIndex = methods.randomIndex;
Array.prototype.replace = methods.replace;
Array.prototype.shuffle = methods.shuffle;
Array.prototype.sum = methods.sum;
Array.prototype.toArray = methods.toArray;
Array.prototype.toNum = methods.toNum;
Array.prototype.toObject = methods.toObject;
Array.prototype.toStr = methods.toStr;
Array.prototype.types = methods.types;
Array.prototype.withoutDuplicates = methods.withoutDuplicates;
Array.prototype.withoutFalsyValues = methods.withoutFalsyValues;
Array.prototype.withoutNullValues = methods.withoutNullValues;
};

arrayUSA.withLength = (n = 0) => new ArrayUSA(...Array.apply(null, Array(n)));

module.exports = arrayUSA;
